import logging
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from current_lesson_task import LessonManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ä–æ–∫–æ–≤
lesson_manager = LessonManager("ktp.json")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_solutions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìö –¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ", callback_data='current_lesson')],
        [InlineKeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')],
        [InlineKeyboardButton("üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data='submit_solution')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Python.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∑–∞–Ω—è—Ç–∏–∏\n"
        "‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
        "‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'current_lesson':
        await show_current_lesson(update, context)
    elif query.data == 'get_task':
        await send_task(update, context)
    elif query.data == 'submit_solution':
        await request_solution(update, context)

async def show_current_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∑–∞–Ω—è—Ç–∏–∏"""
    query = update.callback_query
    current_lesson = lesson_manager.get_current_lesson()
    
    if current_lesson:
        message = (
            f"üìö –¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ:\n\n"
            f"üìÖ –î–∞—Ç–∞: {current_lesson['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {current_lesson['start_time']} - {current_lesson['end_time']}\n"
            f"üìù –¢–µ–º–∞: {current_lesson['topic']}\n"
            f"üìã –ó–∞–¥–∞–Ω–∏–µ: {current_lesson['assignment']}"
        )
    else:
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    current_lesson = lesson_manager.get_current_lesson()
    
    if current_lesson:
        task = lesson_manager.generate_task_with_llm(current_lesson)
        
        message = (
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task['title']}\n\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{task['description']}\n\n"
            f"üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n" + "\n".join(f"‚Ä¢ {req}" for req in task['requirements']) + "\n\n"
            f"üìö –ü—Ä–∏–º–µ—Ä—ã:\n"
        )
        
        for example in task['examples']:
            message += f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {example['input']}\n"
            message += f"–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {example['output']}\n\n"
        
        message += "üìù –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n" + "\n".join(f"{i+1}. {step}" for i, step in enumerate(task['steps']))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        user_solutions[user_id] = {
            'task': task,
            'solution': None,
            'status': 'pending'
        }
    else:
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"
    
    keyboard = [
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data='submit_solution')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def request_solution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in user_solutions:
        message = "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ!"
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    else:
        message = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ Python.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è:\n"
            "1. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–¥—É\n"
            "3. –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"
        )
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def handle_solution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if user_id not in user_solutions:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
    if update.message.document:
        file = await context.bot.get_file(update.message.document.file_id)
        solution = await file.download_as_bytearray()
        user_solutions[user_id]['solution'] = solution.decode('utf-8')
    else:
        user_solutions[user_id]['solution'] = update.message.text
    
    user_solutions[user_id]['status'] = 'submitted'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')],
        [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
        "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –¥–∞—Å—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
        reply_markup=reply_markup
    )

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üìö –¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ", callback_data='current_lesson')],
        [InlineKeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')],
        [InlineKeyboardButton("üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data='submit_solution')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token("YOUR_BOT_TOKEN").build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_solution))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 