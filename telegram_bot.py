import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from current_lesson_task import LessonManager
import json
import os
from datetime import datetime
from dotenv import load_dotenv
from langchain_gigachat import GigaChat
from langchain_core.messages import SystemMessage, HumanMessage
import subprocess
import tempfile
from telegram.error import NetworkError, TelegramError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ä–æ–∫–æ–≤
lesson_manager = LessonManager("ktp.json")

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_solutions = {}
student_registrations = {}  # {user_id: {lesson_date: registration_data}}
user_stats = {}  # user_id: {'total': 0, 'success': 0}

# –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Ñ–∞–π–ª–∞)
test_questions = [
    {"q": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ø–∏—Å–æ–∫ –≤ Python?", "a": ["–ò–∑–º–µ–Ω—è–µ–º–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", "–ù–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è", "–ú–æ–¥—É–ª—å"], "correct": 0},
    {"q": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ç–µ–∂?", "a": ["[]", "{}", "()", "<>"], "correct": 2},
    {"q": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ my_list?", "a": ["my_list.len()", "len(my_list)", "length(my_list)", "my_list.length()"], "correct": 1},
    {"q": "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫?", "a": ["add()", "append()", "insert()", "push()"], "correct": 1},
    {"q": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–∑ —Å–ø–∏—Å–∫–∞ —Å 2 –ø–æ 4 —ç–ª–µ–º–µ–Ω—Ç?", "a": ["my_list[2:5]", "my_list[1:4]", "my_list[2:4]", "my_list[1:5]"], "correct": 0}
]

user_tests = {}  # user_id: {"current": int, "answers": list}

def save_registrations():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
    with open('registrations.json', 'w', encoding='utf-8') as f:
        json.dump(student_registrations, f, ensure_ascii=False, indent=2)

def load_registrations():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    global student_registrations
    try:
        with open('registrations.json', 'r', encoding='utf-8') as f:
            student_registrations = json.load(f)
    except FileNotFoundError:
        student_registrations = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_registrations()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏", callback_data='register_attendance')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Python.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞–Ω–∏—é –∏ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ.",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'current_lesson':
        await show_current_lesson(update, context)
    elif query.data == 'get_task':
        await send_task(update, context)
    elif query.data == 'submit_solution':
        await request_solution(update, context)
    elif query.data == 'register_attendance':
        await register_attendance(update, context)
    elif query.data == 'start_test':
        await start_test(update, context)
    elif query.data == 'back_to_menu':
        await back_to_menu(update, context)

async def show_current_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∑–∞–Ω—è—Ç–∏–∏"""
    query = update.callback_query
    current_lesson = lesson_manager.get_current_lesson()
    
    if current_lesson:
        message = (
            f"üìö –¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ:\n\n"
            f"üìÖ –î–∞—Ç–∞: {current_lesson['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {current_lesson['start_time']} - {current_lesson['end_time']}\n"
            f"üìù –¢–µ–º–∞: {current_lesson['topic']}\n"
            f"üìã –ó–∞–¥–∞–Ω–∏–µ: {current_lesson['assignment']}"
        )
    else:
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    current_lesson = lesson_manager.get_current_lesson()
    
    if current_lesson:
        task = lesson_manager.generate_task_with_llm(current_lesson)
        
        message = (
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {task['title']}\n\n"
            f"üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{task['description']}\n\n"
            f"üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n" + "\n".join(f"‚Ä¢ {req}" for req in task['requirements']) + "\n\n"
            f"üìö –ü—Ä–∏–º–µ—Ä—ã:\n"
        )
        
        for example in task['examples']:
            message += f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {example['input']}\n"
            message += f"–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {example['output']}\n\n"
        
        message += "üìù –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n" + "\n".join(f"{i+1}. {step}" for i, step in enumerate(task['steps']))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        user_solutions[user_id] = {
            'task': task,
            'solution': None,
            'status': 'pending'
        }
    else:
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"
    
    keyboard = [
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data='submit_solution')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def request_solution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in user_solutions:
        message = "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ!"
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    else:
        message = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ Python.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è:\n"
            "1. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–¥—É\n"
            "3. –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"
        )
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def handle_solution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if user_id not in user_solutions:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
    if update.message.document:
        file = await context.bot.get_file(update.message.document.file_id)
        solution = await file.download_as_bytearray()
        user_solutions[user_id]['solution'] = solution.decode('utf-8')
    else:
        user_solutions[user_id]['solution'] = update.message.text
    
    user_solutions[user_id]['status'] = 'submitted'

    # AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è
    task = user_solutions[user_id]['task']
    solution_code = user_solutions[user_id]['solution']
    check_results = []
    with tempfile.NamedTemporaryFile('w', suffix='.py', delete=False) as tmp:
        tmp.write(solution_code)
        tmp_path = tmp.name
    for example in task.get('examples', []):
        input_data = example['input']
        expected_output = example['output']
        try:
            proc = subprocess.run(
                ['python3', tmp_path],
                input=input_data.encode('utf-8'),
                capture_output=True,
                timeout=5
            )
            actual_output = proc.stdout.decode('utf-8').strip()
            error_output = proc.stderr.decode('utf-8').strip()
            success = (actual_output == expected_output)
        except Exception as e:
            actual_output = str(e)
            error_output = ''
            success = False
        check_results.append({
            'input': input_data,
            'expected': expected_output,
            'actual': actual_output,
            'error': error_output,
            'success': success
        })
    os.unlink(tmp_path)

    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    if user_id not in user_stats:
        user_stats[user_id] = {'total': 0, 'success': 0}
    user_stats[user_id]['total'] += 1
    if all(res['success'] for res in check_results):
        user_stats[user_id]['success'] += 1

    # === –û–¶–ï–ù–ö–ê ===
    total = user_stats[user_id]['total']
    success = user_stats[user_id]['success']
    percent = round(success / total * 100) if total else 0
    if percent >= 90:
        grade = 5
    elif percent >= 75:
        grade = 4
    elif percent >= 50:
        grade = 3
    elif percent >= 30:
        grade = 2
    else:
        grade = 1

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = "\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
    for i, res in enumerate(check_results, 1):
        report += f"\n–¢–µ—Å—Ç {i}:\n"
        report += f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {res['input']}\n"
        report += f"–û–∂–∏–¥–∞–ª–æ—Å—å: {res['expected']}\n"
        report += f"–ü–æ–ª—É—á–µ–Ω–æ: {res['actual']}\n"
        if res['error']:
            report += f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {res['error']}\n"
        report += f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if res['success'] else '‚ùå –û—à–∏–±–∫–∞'}\n"
    report += f"\nüìä –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: {grade}/5 (—É—Å–ø–µ—Ö–æ–≤: {success} –∏–∑ {total}, {percent}%)"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')],
        [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚úÖ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!" + report,
        reply_markup=reply_markup
    )

async def register_attendance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ —Å —É—á–µ—Ç–æ–º –æ–ø–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–¥–∞—á–µ–π –¥–æ–ø. –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ TaskGenerator"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    current_lesson = lesson_manager.get_current_lesson()
    
    if not current_lesson:
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message, reply_markup=reply_markup)
        return
    
    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è
    lesson_start = datetime.strptime(f"{current_lesson['date']} {current_lesson['start_time']}", "%Y-%m-%d %H:%M")
    now = datetime.now()
    late_minutes = (now - lesson_start).total_seconds() / 60
    late_threshold = 10  # –º–∏–Ω—É—Ç
    is_late = late_minutes > late_threshold
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ
    if user_id in student_registrations and current_lesson['date'] in student_registrations[user_id]:
        reg = student_registrations[user_id][current_lesson['date']]
        message = (
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ!\n\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg['registration_time']}\n"
            f"–¢–µ–º–∞: {reg['topic']}\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {reg['assignment']}"
        )
        if reg.get('extra_assignment'):
            message += f"\n\n‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ:\n{reg['extra_assignment']}"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º
        keyboard = [
            [InlineKeyboardButton("üìö –¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ", callback_data='current_lesson')],
            [InlineKeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')],
            [InlineKeyboardButton("üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data='submit_solution')],
            [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
    else:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_time = now.strftime("%Y-%m-%d %H:%M:%S")
        extra_assignment = None
        if is_late:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø. –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ TaskGenerator
            extra_lesson = dict(current_lesson)  # –∫–æ–ø–∏—è
            extra_lesson['topic'] = f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ/—É—Å–ª–æ–∂–Ω—ë–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ: {current_lesson['topic']}"
            extra_assignment_obj = lesson_manager.task_generator.generate_task_for_lesson(extra_lesson)
            extra_assignment = (
                f"{extra_assignment_obj['title']}\n"
                f"{extra_assignment_obj['description']}\n"
                f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n" + "\n".join(f"- {req}" for req in extra_assignment_obj['requirements']) + "\n"
                f"–ü—Ä–∏–º–µ—Ä—ã:\n" + "\n".join(
                    f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {ex['input']}\n–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {ex['output']}" for ex in extra_assignment_obj['examples']
                ) + "\n"
                f"–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n" + "\n".join(f"{i+1}. {step}" for i, step in enumerate(extra_assignment_obj['steps']))
            )
        if user_id not in student_registrations:
            student_registrations[user_id] = {}
        
        student_registrations[user_id][current_lesson['date']] = {
            'registration_time': registration_time,
            'topic': current_lesson['topic'],
            'assignment': current_lesson['assignment'],
            'student_name': f"{query.from_user.first_name} {query.from_user.last_name or ''}",
            'extra_assignment': extra_assignment
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        save_registrations()
        
        message = (
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!\n\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è: {current_lesson['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_time}\n"
            f"üìö –¢–µ–º–∞: {current_lesson['topic']}\n"
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {current_lesson['assignment']}"
        )
        if extra_assignment:
            message += f"\n\n‚ö†Ô∏è –í—ã –æ–ø–æ–∑–¥–∞–ª–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{extra_assignment}"
        else:
            message += "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ."
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º
        keyboard = [
            [InlineKeyboardButton("üìö –¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ", callback_data='current_lesson')],
            [InlineKeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')],
            [InlineKeyboardButton("üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data='submit_solution')],
            [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    current_lesson = lesson_manager.get_current_lesson()
    is_registered = (current_lesson and user_id in student_registrations and current_lesson['date'] in student_registrations[user_id])
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    show_test = False
    if is_registered and current_lesson:
        lesson_end = datetime.strptime(f"{current_lesson['date']} {current_lesson['end_time']}", "%Y-%m-%d %H:%M")
        now = datetime.now()
        if (lesson_end - now).total_seconds() <= 600:  # 10 –º–∏–Ω—É—Ç
            show_test = True
    if is_registered:
        keyboard = [
            [InlineKeyboardButton("üìö –¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ", callback_data='current_lesson')],
            [InlineKeyboardButton("üìù –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')],
            [InlineKeyboardButton("üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data='submit_solution')],
        ]
        if show_test:
            keyboard.append([InlineKeyboardButton("üß™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='start_test')])
        keyboard.append([InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏", callback_data='register_attendance')])
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        keyboard = [[InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏", callback_data='register_attendance')]]
        message = "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏."
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=message, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü–æ—Ä—è–¥–æ–∫ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n"
        "1. –û—Ç–º–µ—Ç—å—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∑–∞–Ω—è—Ç–∏–∏\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = str(query.from_user.id)
    current_lesson = lesson_manager.get_current_lesson()
    if not current_lesson:
        await query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞.")
        return
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ TaskGenerator
    test_obj = lesson_manager.task_generator.generate_test_for_lesson(current_lesson, num_questions=5)
    print('GigaChat response:', test_obj.get("questions", []))
    questions = test_obj.get("questions", [])
    if not questions or len(questions) < 1:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ –∑–∞–Ω—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
        return
    user_tests[user_id] = {"current": 0, "answers": [], "questions": questions}
    await send_test_question(query, user_id)

def get_test_keyboard(q):
    return InlineKeyboardMarkup([[InlineKeyboardButton(a, callback_data=f"test_answer_{i}")] for i, a in enumerate(q['a'])])

async def send_test_question(query, user_id):
    idx = user_tests[user_id]["current"]
    q = user_tests[user_id]["questions"][idx]
    await query.edit_message_text(
        text=f"–í–æ–ø—Ä–æ—Å {idx+1}/5:\n{q['q']}",
        reply_markup=get_test_keyboard(q)
    )

async def test_answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    if not data.startswith("test_answer_"):
        return
    answer_idx = int(data.split("_")[-1])
    test_state = user_tests.get(user_id)
    if not test_state:
        await query.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç!", show_alert=True)
        return
    test_state["answers"].append(answer_idx)
    test_state["current"] += 1
    if test_state["current"] < len(test_state["questions"]):
        await send_test_question(query, user_id)
    else:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        correct = sum(1 for i, q in enumerate(test_state["questions"]) if test_state["answers"][i] == q["correct"])
        await query.edit_message_text(
            text=f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct}/{len(test_state['questions'])} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
        )
        del user_tests[user_id]

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    stats = user_stats.get(user_id, {'total': 0, 'success': 0})
    total = stats['total']
    success = stats['success']
    percent = round(success / total * 100) if total else 0
    if percent >= 90:
        grade = 5
    elif percent >= 75:
        grade = 4
    elif percent >= 50:
        grade = 3
    elif percent >= 30:
        grade = 2
    else:
        grade = 1
    await update.message.reply_text(
        f'üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n'
        f'–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total}\n'
        f'–£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {success}\n'
        f'–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {percent}%\n'
        f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {grade}/5'
    )

async def error_handler(update, context):
    try:
        raise context.error
    except NetworkError as e:
        logger.error(f"Network error: {e}")
    except TelegramError as e:
        logger.error(f"Telegram error: {e}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
    token = "7526612637:AAFjBbtgpxvgjBDdOMFT8h492Tf_BgDQdj8"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(test_answer_handler, pattern=r'^test_answer_'))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT | filters.Document.ALL, handle_solution))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 