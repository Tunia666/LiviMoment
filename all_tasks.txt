ПРАКТИЧЕСКИЕ ЗАДАНИЯ ПО PYTHON
=====================================

Задание 1: Написать первую программу "Hello, World!" в IDLE и VS Code
--------------------------------------------------------------------

Часть 1: Создание программы в IDLE

1. Запустите IDLE (Python's Integrated Development and Learning Environment)
2. В меню выберите File -> New File (или нажмите Ctrl+N)
3. В новом окне введите следующий код:
   print("Hello, World!")
4. Сохраните файл (File -> Save или Ctrl+S) с расширением .py, например hello_idle.py
5. Запустите программу (Run -> Run Module или F5)
6. В консоли IDLE должно появиться сообщение "Hello, World!"

Часть 2: Создание программы в VS Code

1. Запустите Visual Studio Code
2. Создайте новый файл (File -> New File или Ctrl+N)
3. Сохраните файл с расширением .py (File -> Save или Ctrl+S), например hello_vscode.py
4. Введите следующий код:
   print("Hello, World!")
5. Установите расширение Python для VS Code, если оно еще не установлено:
   - Нажмите на иконку расширений (или Ctrl+Shift+X)
   - Найдите "Python"
   - Установите расширение от Microsoft
6. Запустите программу:
   - Нажмите на кнопку "Run" в правом верхнем углу, или
   - Используйте сочетание клавиш F5, или
   - Правый клик в редакторе -> Run Python File in Terminal
7. В терминале VS Code должно появиться сообщение "Hello, World!"

Требования к выполнению:
- Создать два файла: hello_idle.py и hello_vscode.py
- Оба файла должны содержать рабочий код
- Программы должны успешно запускаться в соответствующих средах
- В консоли должно выводиться сообщение "Hello, World!"

=====================================

Задание 2: Решение задач на преобразование типов и форматированный вывод
-----------------------------------------------------------------------

Задача 1: Преобразование строки в число
Напишите программу, которая:
- Запрашивает у пользователя строку, содержащую число
- Преобразует эту строку в целое число (int)
- Преобразует эту строку в число с плавающей точкой (float)
- Выводит оба результата с пояснениями
Пример ввода: "123.45"
Пример вывода:
Целое число: 123
Число с плавающей точкой: 123.45

Задача 2: Форматирование вывода
Напишите программу, которая:
- Запрашивает имя пользователя
- Запрашивает возраст пользователя
- Используя f-строки, выводит сообщение в формате:
  "Привет, {имя}! Через 5 лет тебе будет {возраст + 5} лет."
Пример ввода:
Имя: Иван
Возраст: 20
Пример вывода:
Привет, Иван! Через 5 лет тебе будет 25 лет.

Задача 3: Работа с процентами
Напишите программу, которая:
- Запрашивает начальную сумму вклада
- Запрашивает процентную ставку
- Рассчитывает сумму вклада через год
- Выводит результат, используя форматирование с двумя знаками после запятой
Пример ввода:
Сумма: 1000
Процент: 5.5
Пример вывода:
Сумма вклада через год: 1055.00 руб.

Задача 4: Преобразование времени
Напишите программу, которая:
- Запрашивает количество секунд
- Преобразует секунды в формат "часы:минуты:секунды"
- Выводит результат, используя форматирование с ведущими нулями
Пример ввода: 3661
Пример вывода:
Время: 01:01:01

Задача 5: Работа с координатами
Напишите программу, которая:
- Запрашивает координаты точки (x, y) в виде строки
- Преобразует строку в два числа
- Выводит координаты в формате "(x, y)" с тремя знаками после запятой
Пример ввода: "3.14159 2.71828"
Пример вывода:
Координаты точки: (3.142, 2.718)

=====================================

Задание 3: Создание программы-калькулятора с ветвлением
------------------------------------------------------

Описание задания:
Написать программу-калькулятор, которая выполняет основные арифметические операции (+, -, *, /) с использованием ветвления.

Требования к программе:

1. Ввод данных:
   - Программа должна запрашивать у пользователя первое число
   - Программа должна запрашивать у пользователя второе число
   - Программа должна запрашивать у пользователя операцию (+, -, *, /)

2. Обработка данных:
   - Использовать конструкцию if-elif-else для выбора операции
   - Реализовать все четыре арифметические операции
   - Обеспечить защиту от деления на ноль
   - Обработать некорректный ввод операций

3. Вывод результатов:
   - Выводить результат вычисления в формате:
     "Результат: [первое число] [операция] [второе число] = [результат]"
   - При делении на ноль выводить сообщение об ошибке
   - При вводе некорректной операции выводить сообщение об ошибке

Пример работы программы:

Ввод:
Первое число: 10
Второе число: 5
Операция: +

Вывод:
Результат: 10 + 5 = 15

=====================================

Задание 4: Реализация программы для подсчёта гласных в строке
-----------------------------------------------------------

Описание задания:
Написать программу, которая подсчитывает количество гласных букв в введенной пользователем строке. Программа должна учитывать как русские, так и английские гласные буквы.

Требования к программе:

1. Ввод данных:
   - Программа должна запрашивать у пользователя строку
   - Строка может содержать буквы русского и английского алфавитов
   - Строка может содержать пробелы, знаки препинания и цифры

2. Обработка данных:
   - Определить все гласные буквы (русские и английские)
   - Подсчитать количество каждой гласной буквы
   - Подсчитать общее количество гласных
   - Учитывать регистр букв (а и А считаются как одна буква)

3. Вывод результатов:
   - Вывести общее количество гласных букв
   - Вывести количество каждой гласной буквы
   - Вывести процентное соотношение гласных букв от общего количества букв

Пример работы программы:

Ввод:
Введите строку: Привет, Hello!

Вывод:
Общее количество гласных: 5
Количество каждой гласной:
е: 2
и: 1
о: 1
е: 1
Процент гласных: 41.67%

Примечание:
Русские гласные: а, е, ё, и, о, у, ы, э, ю, я
Английские гласные: a, e, i, o, u, y (в некоторых случаях)

=====================================

Задание 5: Работа со списком чисел, сортировка и поиск min/max
------------------------------------------------------------

Описание задания:
Написать программу, которая создает список из 10 чисел, выполняет его сортировку и находит минимальное и максимальное значения. Программа должна демонстрировать различные способы работы со списками в Python.

Требования к программе:

1. Создание списка:
   - Создать список из 10 чисел
   - Числа могут быть введены пользователем
   - Или сгенерированы случайным образом
   - Поддерживать как целые числа, так и числа с плавающей точкой

2. Обработка данных:
   - Реализовать сортировку списка по возрастанию
   - Реализовать сортировку списка по убыванию
   - Найти минимальное значение в списке
   - Найти максимальное значение в списке
   - Вычислить среднее арифметическое

3. Вывод результатов:
   - Вывести исходный список
   - Вывести отсортированный список (по возрастанию)
   - Вывести отсортированный список (по убыванию)
   - Вывести минимальное значение
   - Вывести максимальное значение
   - Вывести среднее арифметическое

Пример работы программы:

Ввод (случайная генерация):
Исходный список: [45, 12, 89, 34, 67, 23, 56, 78, 90, 1]

Вывод:
Исходный список: [45, 12, 89, 34, 67, 23, 56, 78, 90, 1]
Список по возрастанию: [1, 12, 23, 34, 45, 56, 67, 78, 89, 90]
Список по убыванию: [90, 89, 78, 67, 56, 45, 34, 23, 12, 1]
Минимальное значение: 1
Максимальное значение: 90
Среднее арифметическое: 49.5

=====================================

Общие рекомендации по выполнению заданий:
----------------------------------------

1. Каждое задание должно быть в отдельном файле с расширением .py
2. Использовать понятные имена файлов (например, task1.py, task2.py и т.д.)
3. Добавлять комментарии к коду
4. Проверять программы на различных входных данных
5. Обрабатывать возможные ошибки
6. Следовать стилю кодирования PEP 8
7. Тестировать программы перед сдачей
8. Сохранять все файлы в одной директории
9. Создать README.md с описанием проекта и инструкциями по запуску 